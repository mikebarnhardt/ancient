/* =============================================================================
   Icon
   ========================================================================== */

/**
 *  1.  Keep the icon size relative to the font-size.
 *  2.  This should be the adjusted to keep the icon aligned to the font
 *      baseline (See https://blog.prototypr.io/align-svg-icons-to-text-and-say-goodbye-to-font-icons-d44b3d7b26b4).
 */

.icon {
  display: inline-block;
  height: 1em; /* 1 */
  width: 1em; /* 1 */
}

.icon.icon--inline {
  position: relative;
  transform: translateY(12.5%);
}

.icon > svg {
  display: block;
}

.control > .icon {
  position: absolute;
  top: 50%;
  transform: translateY(-50%);
}

.control > .icon:not(button) {
  pointer-events: none;
}

.control > .icon:first-child {
  left: 1.5rem;
}

.control > .icon:last-child {
  right: 1.5rem;
}

.control.control--sm > .icon:first-child {
  left: 0.75rem;
}

.control.control--sm > .icon:last-child {
  right: 0.75rem;
}

.control.control--lg > .icon:first-child {
  left: 3rem;
}

.control.control--lg > .icon:last-child {
  right: 3rem;
}

/* Path
   ========================================================================== */

/**
 *  1.  `currentColor` will allow the icon to be used universally without
 *      needing a separate variable for each component (`icon--button`)
 *  2.  For duotone icons we can lower the opacity of the secondary path
 *      without needing excessive variables.
 */

.path--primary {
  fill: var(--path-primary-fill); /* 1 */
  opacity: var(--path-primary-opacity);
}

.path--secondary {
  fill: var(--path-secondary-fill); /* 1 */
  opacity: var(--path-secondary-opacity); /* 2 */
}
